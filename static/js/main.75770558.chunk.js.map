{"version":3,"sources":["Components/Gallery.js","Components/Container.js","Components/Search.js","Components/Nav.js","Components/Header.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","props","react_default","a","createElement","src","url","alt","Container","pictures","data","map","picture","Components_Gallery","key","id","concat","farm","server","secret","className","Search","state","searchText","onSearch","e","_this","setState","target","value","handleSubmit","preventDefault","newRoute","query","history","push","currentTarget","reset","_this2","this","onSubmit","type","onChange","name","ref","input","placeholder","fill","height","viewBox","width","xmlns","d","React","Component","withRouter","Nav","react_router_dom","to","Header","_ref","Components_Search","Components_Nav","apiKey","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","performSearch","term","axios","get","then","response","photos","photo","catch","error","console","log","react_router","exact","path","render","Components_Header","onClick","match","params","Components_Container","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75770558.chunk.js","sourcesContent":["import React  from 'react';\n\nconst Gallery = props => (\n  <li>\n    <img src={props.url} alt=\"\" />\n  </li>\n);\n\nexport default Gallery;\n","import React  from 'react';\nimport Gallery from './Gallery';\n\nconst Container = props => {\n\n  //Using map() to loop through list of images \n  const results = props.data;\n  let pictures = results.map(picture =>\n    <Gallery key={picture.id} url={`https://farm${picture.farm}.staticflickr.com/${picture.server}/${picture.id}_${picture.secret}.jpg`}/>\n  );\n\n  return (\n    <div>\n      <h2>Results</h2>\n      <div className=\"photo-container\">\n        <ul>\n          {pictures}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Container;\n","import React  from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nclass Search extends React.Component {\n\n  state = {\n    searchText: ''\n  }\n\n  // Update state for searchText\n  onSearch = e => {\n    this.setState({ searchText: e.target.value });\n  }\n\n  // Set new value to search route\n  handleSubmit = e => {\n    e.preventDefault();\n\n    let SearchQuery = this.query.value;\n    let newRoute = '/search/' + SearchQuery;\n    this.props.history.push(newRoute);\n    e.currentTarget.reset();\n  }\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\n        <input type=\"search\"\n               onChange={this.onSearch}\n               name=\"search\"\n               ref={(input) => this.query = input}\n               placeholder=\"Search\"/>\n        <button type=\"submit\" className=\"search-button\">\n          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n          </svg>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Search);\n","import React  from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Nav = () => (\n  <nav className=\"main-nav\">\n    <ul>\n      <li><NavLink to='/search/cats'>Cats</NavLink></li>\n      <li><NavLink to='/search/dogs'>Dogs</NavLink></li>\n      <li><NavLink to='/search/Fish'>Fish</NavLink></li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;\n","import React  from 'react';\nimport Search from './Search';\nimport Nav from './Nav';\n\nconst Header = ({onSearch}) => (\n  <div>\n    <h1>Flickr Gallery</h1>\n    <Search onSearch={onSearch}/>\n    <Nav />\n  </div>\n);\n\nexport default Header;\n","const apiKey = \"c7f8f0ccb62e22393de908d71fb3b105\";\n\nexport default apiKey;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Container from './Components/Container';\nimport Header from './Components/Header'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport apiKey from './config';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      pictures: [],\n      term: ''\n    };\n  }\n\n  //default cats when loading\n  componentDidMount() {\n    this.performSearch('cats');\n  }\n\n\n  //function to perform the search for a given query\n  performSearch = (query) => {\n    if (query !== this.state.term) {\n      axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n        .then(response => {\n            this.setState({\n                pictures: response.data.photos.photo,\n                term: query\n            });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } \n  }\n\n\n  \n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n            <Route exact path=\"/\" render={props => <Header onSearch={this.performSearch} />}/>\n          <Switch>\n            <Route path=\"/search/:query\" render={props => <Header onClick={this.performSearch(props.match.params.query)} />} />\n          </Switch>\n          <Route path=\"/\" render={props => <Container data={this.state.pictures}/>} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}